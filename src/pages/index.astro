---
import { Image } from 'astro:assets';

// Import all character images
import aiMiImg from '/public/characters/ai-mi.png';
import asherImg from '/public/characters/asher.png';
import atlasImg from '/public/characters/atlas.png';
import drekarImg from '/public/characters/drekar.png';
import dubuImg from '/public/characters/dubu.png';
import eraImg from '/public/characters/era.png';
import estelleImg from '/public/characters/estelle.png';
import finiiImg from '/public/characters/finii.png';
import julietteImg from '/public/characters/juliette.png';
import junoImg from '/public/characters/juno.png';
import kaiImg from '/public/characters/kai.png';
import kazanImg from '/public/characters/kazan.png';
import lunaImg from '/public/characters/luna.png';
import makoImg from '/public/characters/mako.png';
import naoImg from '/public/characters/nao.png';
import octaviaImg from '/public/characters/octavia.png';
import rasmusImg from '/public/characters/rasmus.png';
import runeImg from '/public/characters/rune.png';
import vyceImg from '/public/characters/vyce.png';
import xImg from '/public/characters/x.png';
import zentaroImg from '/public/characters/zentaro.png';

// Import all map images
import aiMiAppImg from '/public/maps/ai-mi-app.jpg';
import atlasLabImg from '/public/maps/atlas-lab.jpg';
import gatesObscuraImg from '/public/maps/gates-obscura.jpg';
import inkysSplashImg from '/public/maps/inkys-splash.jpg';
import nightMarketImg from '/public/maps/night-market.jpg';
import taikoTempleImg from '/public/maps/taiko-temple.jpg';
import ahtenCityImg from '/public/maps/ahten-city.jpg';
import clarionTestImg from '/public/maps/clarion-test.jpg';
import demonDaisImg from '/public/maps/demon-dais.jpg';
import oniVillageImg from '/public/maps/oni-village.jpg';

const CHARACTERS = [
    { name: "Ai.Mi", image: aiMiImg },
    { name: "Asher", image: asherImg },
    { name: "Atlas", image: atlasImg },
    { name: "Drek'ar", image: drekarImg },
    { name: "Dubu", image: dubuImg },
    { name: "Era", image: eraImg },
    { name: "Estelle", image: estelleImg },
    { name: "Finii", image: finiiImg },
    { name: "Juliette", image: julietteImg },
    { name: "Juno", image: junoImg },
    { name: "Kai", image: kaiImg },
    { name: "Kazan", image: kazanImg },
    { name: "Luna", image: lunaImg },
    { name: "Mako", image: makoImg },
    { name: "Nao", image: naoImg },
    { name: "Octavia", image: octaviaImg },
    { name: "Rasmus", image: rasmusImg },
    { name: "Rune", image: runeImg },
    { name: "Vyce", image: vyceImg },
    { name: "X", image: xImg },
    { name: "Zentaro", image: zentaroImg }
];

const MAPS = [
    { name: "Ai.Mi's App", image: aiMiAppImg },
    { name: "Atlas's Lab", image: atlasLabImg },
    { name: "Gates of Obscura", image: gatesObscuraImg },
    { name: "Inky's Splash Zone", image: inkysSplashImg },
    { name: "Night Market", image: nightMarketImg },
    { name: "Taiko Temple", image: taikoTempleImg },
    { name: "Ahten City", image: ahtenCityImg },
    { name: "Clarion Test Chamber", image: clarionTestImg },
    { name: "Demon Dais", image: demonDaisImg },
    { name: "Oni Village", image: oniVillageImg }
];
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Omega Strikers Casino Slots</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Inter:wght@300;400;500;600&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #2c1810, #1a0f08, #3d2317);
            min-height: 100vh;
            font-family: 'Inter', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            color: #f4f4f4;
        }

        .app-container {
            transform: scale(0.75);
            transform-origin: center;
            width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .tab-navigation {
            display: flex;
            gap: 8px;
            margin-bottom: 32px;
            background: rgba(42, 26, 15, 0.6);
            padding: 8px;
            border-radius: 16px;
            border: 1px solid #b8941f;
        }

        .tab-button {
            background: linear-gradient(145deg, #4a3426, #2a1a0f);
            color: #e8dcc0;
            border: 1px solid transparent;
            padding: 12px 24px;
            font-family: 'Inter', sans-serif;
            font-weight: 500;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.95rem;
        }

        .tab-button:hover {
            background: linear-gradient(145deg, #5a4332, #3d2c20);
            border-color: #d4af37;
        }

        .tab-button.active {
            background: linear-gradient(145deg, #d4af37, #b8941f);
            color: #2a1a0f;
            font-weight: 600;
        }

        .tab-content {
            display: none;
            width: 100%;
            justify-content: center;
        }

        .tab-content.active {
            display: flex;
        }

        .main-container {
            display: flex;
            align-items: center;
            gap: 60px;
        }

        .collection-panel {
            background: linear-gradient(145deg, #4a3426, #2a1a0f);
            border: 2px solid #d4af37;
            border-radius: 16px;
            padding: 24px;
            width: 320px;
            height: 580px;
            overflow-y: auto;
            box-shadow: 
                0 8px 32px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(212, 175, 55, 0.2);
        }

        .collection-title {
            color: #d4af37;
            font-family: 'Playfair Display', serif;
            font-size: 1.8rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 24px;
            letter-spacing: 0.5px;
        }

        .collected-characters {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }


        .collected-char {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 16px;
            background: linear-gradient(145deg, #5a4332, #3d2c20);
            border: 1px solid #b8941f;
            border-radius: 12px;
            color: #f4f4f4;
            transition: all 0.2s ease;
        }

        .collected-char:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .collected-char img {
            width: 48px;
            height: 48px;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid #d4af37;
            background: rgba(0, 0, 0, 0.2);
        }

        .collected-char .name {
            font-size: 1rem;
            font-weight: 500;
            color: #e8dcc0;
        }

        .casino-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 25% 25%, rgba(212, 175, 55, 0.08) 0%, transparent 60%),
                radial-gradient(circle at 75% 75%, rgba(139, 69, 19, 0.12) 0%, transparent 60%);
        }

        .slot-machine {
            position: relative;
            background: linear-gradient(145deg, #6b5142, #4a3426);
            border: 3px solid #d4af37;
            border-radius: 24px;
            padding: 48px;
            box-shadow: 
                0 16px 48px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(212, 175, 55, 0.2);
            z-index: 10;
        }

        .title {
            text-align: center;
            color: #d4af37;
            font-family: 'Playfair Display', serif;
            font-size: 3.2rem;
            font-weight: 700;
            margin-bottom: 32px;
            letter-spacing: 1px;
        }

        .slots-container {
            display: flex;
            gap: 28px;
            margin-bottom: 48px;
            justify-content: center;
        }

        .slot {
            width: 140px;
            height: 160px;
            background: linear-gradient(145deg, #2a1a0f, #1a0f08);
            border: 2px solid #b8941f;
            border-radius: 16px;
            overflow: hidden;
            position: relative;
            box-shadow: 
                inset 0 2px 0 rgba(212, 175, 55, 0.1),
                0 8px 24px rgba(0, 0, 0, 0.4);
        }

        .slot-window {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        .slot-reel {
            position: absolute;
            width: 100%;
            top: 0;
            transition: top 0.1s ease;
        }

        .slot-symbol {
            width: 100%;
            height: 160px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: linear-gradient(145deg, #3d2c20, #2a1a0f);
            border-bottom: 1px solid rgba(212, 175, 55, 0.2);
            position: relative;
        }

        .slot-symbol img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            border-radius: 0;
            border: none;
            background: transparent;
        }



        .result {
            text-align: center;
            margin-top: 20px;
            min-height: 60px;
        }

        .winner {
            color: #FFD700;
            font-size: 2.5rem;
            animation: winnerPulse 1s infinite;
            text-shadow: 
                0 0 20px #FFD700,
                0 0 40px #FFD700;
        }

        @keyframes winnerPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .spinning {
            animation: spin 0.1s linear infinite;
        }

        @keyframes spin {
            from { transform: translateY(0); }
            to { transform: translateY(-100%); }
        }

        .controls {
            text-align: center;
            margin-top: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 24px;
        }

        .spin-button {
            background: linear-gradient(145deg, #c41e3a, #a01729);
            color: #f4f4f4;
            border: 2px solid #d4af37;
            padding: 20px 48px;
            font-size: 1.6rem;
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
            letter-spacing: 0.5px;
        }

        .spin-button:hover {
            background: linear-gradient(145deg, #d4284a, #b01d32);
            transform: translateY(-2px);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4);
        }

        .spin-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .reset-icon-button {
            background: linear-gradient(145deg, #8b4513, #654321);
            color: #d4af37;
            border: 2px solid #b8941f;
            padding: 0;
            font-size: 1.6rem;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.3);
            width: 56px;
            height: 56px;
            display: flex;
            align-items: center;
            justify-content: center;
            line-height: 1;
        }

        .reset-icon-button:hover {
            background: linear-gradient(145deg, #a0522d, #7a4a28);
            transform: translateY(-2px) rotate(180deg);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
        }

        /* Animated gradient titles */
        .title-random-ban {
            background: linear-gradient(45deg, #ff0000, #cc0000, #ff4444, #aa0000);
            background-size: 400% 400%;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: redGradientMove 2s ease-in-out infinite;
        }

        .title-random-striker {
            background: linear-gradient(45deg, #d4af37, #ffd700, #b8941f, #ffed4a);
            background-size: 400% 400%;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: goldGradientMove 2s ease-in-out infinite;
            -webkit-text-stroke: 2px white;
            text-stroke: 2px white;
        }

        @keyframes redGradientMove {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        @keyframes goldGradientMove {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        #recentActions.recent-actions-container {
            height: 480px !important;
            overflow-y: auto !important;
            padding: 12px !important;
            display: block !important;
            flex-direction: unset !important;
            gap: unset !important;
            background: transparent !important;
            border: none !important;
        }

        #recentActions .action-item {
            display: flex !important;
            align-items: center !important;
            gap: 12px !important;
            padding: 12px !important;
            border-radius: 8px !important;
            margin-bottom: 8px !important;
            border: 2px solid rgba(255, 255, 255, 0.3) !important;
            transition: all 0.2s ease !important;
            width: calc(100% - 4px) !important;
            max-width: 260px !important;
            min-height: 64px !important;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4) !important;
            position: relative !important;
        }

        #recentActions .action-item.ban {
            background: linear-gradient(145deg, #CC0000, #AA0000) !important;
            color: white !important;
            border-color: #FF4444 !important;
        }

        #recentActions .action-item.roll {
            background: linear-gradient(145deg, #00AA00, #008800) !important;
            color: white !important;
            border-color: #44FF44 !important;
        }

        #recentActions .action-item:hover {
            transform: translateY(-1px) !important;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4) !important;
        }

        #recentActions .action-item img {
            width: 40px !important;
            height: 40px !important;
            object-fit: cover !important;
            border-radius: 6px !important;
            border: 2px solid white !important;
            flex-shrink: 0 !important;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
        }

        #recentActions .action-content {
            display: flex !important;
            flex-direction: column !important;
            flex-grow: 1 !important;
            min-width: 0 !important;
        }

        #recentActions .action-type {
            font-size: 0.7rem !important;
            font-weight: 700 !important;
            text-transform: uppercase !important;
            letter-spacing: 0.5px !important;
            opacity: 0.9 !important;
            margin-bottom: 3px !important;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5) !important;
        }

        #recentActions .action-name {
            font-size: 0.9rem !important;
            font-weight: 600 !important;
            white-space: nowrap !important;
            overflow: hidden !important;
            text-overflow: ellipsis !important;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5) !important;
        }

        /* Draft Tab Styles */
        .draft-panel {
            background: linear-gradient(145deg, #6b5142, #4a3426);
            border: 3px solid #d4af37;
            border-radius: 24px;
            padding: 48px;
            min-width: 600px;
            box-shadow: 
                0 16px 48px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(212, 175, 55, 0.2);
        }

        .draft-controls {
            display: flex;
            gap: 16px;
            margin-bottom: 24px;
            flex-wrap: wrap;
        }

        .draft-button {
            background: linear-gradient(145deg, #c41e3a, #a01729);
            color: #f4f4f4;
            border: 2px solid #d4af37;
            padding: 12px 24px;
            font-family: 'Inter', sans-serif;
            font-weight: 500;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .draft-button:hover:not(:disabled) {
            background: linear-gradient(145deg, #d4284a, #b01d32);
            transform: translateY(-1px);
        }

        .draft-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .draft-status {
            background: rgba(212, 175, 55, 0.1);
            border: 1px solid #d4af37;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 24px;
        }

        .ban-controls {
            display: flex;
            gap: 12px;
            margin-bottom: 16px;
            align-items: center;
        }

        .character-select {
            background: linear-gradient(145deg, #4a3426, #2a1a0f);
            border: 1px solid #b8941f;
            color: #e8dcc0;
            padding: 8px 12px;
            border-radius: 8px;
            font-family: 'Inter', sans-serif;
        }

        .banned-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 12px;
            margin-top: 16px;
        }

        .banned-item {
            background: linear-gradient(145deg, #8b4513, #654321);
            border: 1px solid #b8941f;
            border-radius: 8px;
            padding: 8px 12px;
            color: #e8dcc0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .unban-btn {
            background: #c41e3a;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 4px 8px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        /* Map Tab Styles */
        .map-panel {
            background: linear-gradient(145deg, #6b5142, #4a3426);
            border: 3px solid #d4af37;
            border-radius: 24px;
            padding: 48px;
            text-align: center;
            min-width: 500px;
            box-shadow: 
                0 16px 48px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(212, 175, 55, 0.2);
        }

        .map-result {
            margin-top: 32px;
            padding: 24px;
            background: rgba(212, 175, 55, 0.1);
            border: 1px solid #d4af37;
            border-radius: 16px;
        }

        .map-image {
            width: 100%;
            max-width: 400px;
            height: auto;
            border-radius: 12px;
            border: 2px solid #d4af37;
            margin-top: 16px;
        }
    </style>
</head>
<body>
    <div class="casino-bg"></div>
    
    <div class="app-container">

        <!-- Collection Tab -->
        <div class="tab-content" id="collection-tab">
            <div class="main-container" style="justify-content: center;">
                <div class="collection-panel">
                    <div class="collection-title">ROLLED STRIKERS</div>
                    <div class="collected-characters" id="collectedCharacters"></div>
                    <div style="text-align: center; margin-top: 24px;">
                        <button class="reset-icon-button" id="resetCollectionButton">⟲ Reset Collection</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Draft Tab -->
        <div class="tab-content active" id="draft-tab">
            <div class="main-container">
                <div class="collection-panel">
                    <div class="collection-title">RECENT ACTIONS</div>
                    <div class="recent-actions-container" id="recentActions"></div>
                </div>
                
                <div class="slot-machine">
                    <h1 class="title" id="dynamicTitle">DRAFT SYSTEM</h1>
        
        <div class="slots-container">
            <div class="slot">
                <div class="slot-window">
                    <div class="slot-reel" id="reel1">
                        {Array.from({length: 6}).map(() => 
                            CHARACTERS.map(char => (
                                <div class="slot-symbol">
                                    <Image src={char.image} alt={char.name} width={110} height={110} />
                                </div>
                            ))
                        )}
                    </div>
                </div>
            </div>
            <div class="slot">
                <div class="slot-window">
                    <div class="slot-reel" id="reel2">
                        {Array.from({length: 6}).map(() => 
                            CHARACTERS.map(char => (
                                <div class="slot-symbol">
                                    <Image src={char.image} alt={char.name} width={110} height={110} />
                                </div>
                            ))
                        )}
                    </div>
                </div>
            </div>
            <div class="slot">
                <div class="slot-window">
                    <div class="slot-reel" id="reel3">
                        {Array.from({length: 6}).map(() => 
                            CHARACTERS.map(char => (
                                <div class="slot-symbol">
                                    <Image src={char.image} alt={char.name} width={110} height={110} />
                                </div>
                            ))
                        )}
                    </div>
                </div>
            </div>
        </div>

        <div class="result" id="result"></div>
        
                    <div class="controls">
                        <button class="spin-button" id="rollCharacterBtn">ROLL STRIKER</button>
                        <button class="spin-button" id="randomBanBtn" style="background: linear-gradient(145deg, #c41e3a, #a01729); margin-left: 16px;">RANDOM BAN</button>
                    </div>
                    
                    <div class="draft-status" id="draftStatus" style="margin-top: 24px; font-size: 0.9rem;">
                        <h3>No active draft</h3>
                        <p>Start a draft to begin selecting characters with no duplicates</p>
                    </div>

                    <div class="draft-controls" style="margin-top: 16px; flex-wrap: wrap; justify-content: center;">
                        <button class="draft-button" id="resetDraftBtn">Reset Draft</button>
                    </div>

                    <div class="ban-controls" style="margin-top: 16px; justify-content: center;">
                        <select class="character-select" id="banSelect">
                            <option value="">Select character to ban...</option>
                        </select>
                        <button class="draft-button" id="banBtn">Ban Character</button>
                    </div>

                    <div id="bannedSection" style="display: none; margin-top: 16px;">
                        <h4 style="color: #d4af37; margin-bottom: 12px; text-align: center;">Banned Characters</h4>
                        <div class="banned-list" id="bannedList"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Maps Tab -->
        <div class="tab-content" id="maps-tab">
            <div class="map-panel">
                <h1 class="title">Random Map Generator</h1>
                <p style="color: #e8dcc0; margin-bottom: 32px;">Get a random Omega Strikers map for your match</p>
                
                <button class="spin-button" id="randomMapBtn">Random Map</button>
                
                <div id="mapResult" class="map-result" style="display: none;">
                    <h3 id="mapName" style="color: #d4af37; margin-bottom: 16px;"></h3>
                    <img id="mapImage" class="map-image" src="" alt="">
                </div>
            </div>
        </div>
    </div>

    <script define:vars={{ CHARACTERS, MAPS }}>
        const characterNames = CHARACTERS.map(char => char.name);
        const characterImages = CHARACTERS.reduce((acc, char) => {
            // Convert Astro image object to actual URL
            acc[char.name] = typeof char.image === 'string' ? char.image : char.image.src;
            return acc;
        }, {});
        const mapNames = MAPS.map(map => map.name);
        const mapImages = MAPS.reduce((acc, map) => {
            // Convert Astro image object to actual URL
            acc[map.name] = typeof map.image === 'string' ? map.image : map.image.src;
            return acc;
        }, {});

        // Slots functionality
        let isSpinning = false;
        let collectedCharacters = new Set();
        let availableCharacters = [...characterNames];
        
        // Draft functionality
        let isDraftActive = true; // Start automatically
        let draftedCharacters = new Set();
        let bannedCharacters = new Set();
        let recentActions = []; // Store last 8 actions
        let currentAction = 'none'; // 'roll' or 'ban' or 'none'
        
        console.log('Character images:', characterImages);

        function initializeSlots() {
            // Slots are already pre-rendered with Astro Image components
            console.log('Slots initialized with', characterNames.length, 'characters');
            updateAvailableCharacters();
        }

        function updateAvailableCharacters() {
            // Update the available characters list (remove collected ones)
            availableCharacters = characterNames.filter(name => !collectedCharacters.has(name));
        }

        function addToCollection(characterName) {
            if (!collectedCharacters.has(characterName)) {
                collectedCharacters.add(characterName);
                
                // Add to both visual collections
                addToCollectionDisplay('collectedCharacters', characterName);
                addToCollectionDisplay('draftCollectedCharacters', characterName);
                
                updateAvailableCharacters();
            }
        }
        
        function addToCollectionDisplay(containerId, characterName) {
            const collectionDiv = document.getElementById(containerId);
            if (!collectionDiv) return;
            
            const charDiv = document.createElement('div');
            charDiv.className = 'collected-char';
            
            const img = document.createElement('img');
            img.src = characterImages[characterName];
            img.alt = characterName;
            
            const nameDiv = document.createElement('div');
            nameDiv.className = 'name';
            nameDiv.textContent = characterName;
            
            charDiv.appendChild(img);
            charDiv.appendChild(nameDiv);
            collectionDiv.appendChild(charDiv);
        }

        function resetCollection() {
            resetDraft(); // Use the comprehensive reset function
        }

        function addRecentAction(type, characterName) {
            // Add to beginning of array
            recentActions.unshift({ type, characterName, timestamp: Date.now() });
            
            // Keep only last 8 actions
            if (recentActions.length > 8) {
                recentActions = recentActions.slice(0, 8);
            }
            
            updateRecentActionsDisplay();
        }

        function updateRecentActionsDisplay() {
            const container = document.getElementById('recentActions');
            if (!container) {
                console.log('Container not found!');
                return;
            }
            
            console.log('Updating recent actions, count:', recentActions.length);
            container.innerHTML = '';
            
            recentActions.forEach(action => {
                const actionDiv = document.createElement('div');
                actionDiv.className = `action-item ${action.type}`;
                
                // Add inline styles to force styling
                if (action.type === 'ban') {
                    actionDiv.style.cssText = `
                        display: flex !important;
                        align-items: center !important;
                        gap: 12px !important;
                        padding: 12px !important;
                        margin-bottom: 8px !important;
                        border-radius: 8px !important;
                        background: linear-gradient(145deg, #CC0000, #AA0000) !important;
                        color: white !important;
                        border: 2px solid #FF4444 !important;
                        min-height: 64px !important;
                        max-width: 260px !important;
                        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4) !important;
                    `;
                } else {
                    actionDiv.style.cssText = `
                        display: flex !important;
                        align-items: center !important;
                        gap: 12px !important;
                        padding: 12px !important;
                        margin-bottom: 8px !important;
                        border-radius: 8px !important;
                        background: linear-gradient(145deg, #00AA00, #008800) !important;
                        color: white !important;
                        border: 2px solid #44FF44 !important;
                        min-height: 64px !important;
                        max-width: 260px !important;
                        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4) !important;
                    `;
                }
                
                const img = document.createElement('img');
                img.src = characterImages[action.characterName];
                img.alt = action.characterName;
                img.style.cssText = `
                    width: 40px !important;
                    height: 40px !important;
                    object-fit: cover !important;
                    border-radius: 6px !important;
                    border: 2px solid white !important;
                    flex-shrink: 0 !important;
                `;
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'action-content';
                contentDiv.style.cssText = `
                    display: flex !important;
                    flex-direction: column !important;
                    flex-grow: 1 !important;
                `;
                
                const typeDiv = document.createElement('div');
                typeDiv.className = 'action-type';
                typeDiv.textContent = action.type.toUpperCase();
                typeDiv.style.cssText = `
                    font-size: 0.7rem !important;
                    font-weight: 700 !important;
                    text-transform: uppercase !important;
                    margin-bottom: 3px !important;
                `;
                
                const nameDiv = document.createElement('div');
                nameDiv.className = 'action-name';
                nameDiv.textContent = action.characterName;
                nameDiv.style.cssText = `
                    font-size: 0.9rem !important;
                    font-weight: 600 !important;
                `;
                
                contentDiv.appendChild(typeDiv);
                contentDiv.appendChild(nameDiv);
                actionDiv.appendChild(img);
                actionDiv.appendChild(contentDiv);
                container.appendChild(actionDiv);
                
                console.log('Added action:', action.type, action.characterName);
            });
        }

        function updateTitle(text, actionType) {
            const titleEl = document.getElementById('dynamicTitle');
            titleEl.textContent = text;
            titleEl.className = 'title';
            
            if (actionType === 'ban') {
                titleEl.classList.add('title-random-ban');
            } else if (actionType === 'roll') {
                titleEl.classList.add('title-random-striker');
            }
        }

        function getRandomCharacter() {
            // If all characters collected, reset and continue
            if (availableCharacters.length === 0) {
                return characterNames[Math.floor(Math.random() * characterNames.length)];
            }
            return availableCharacters[Math.floor(Math.random() * availableCharacters.length)];
        }

        function spinSlot(reelId, duration, finalCharacter) {
            const reel = document.getElementById(reelId);
            const symbolHeight = 160; // Updated for larger slots
            let currentPosition = 0;
            let speed = 15; // Much faster spinning
            
            const spin = () => {
                currentPosition -= speed;
                reel.style.top = currentPosition + 'px';
                
                // Reset position when we've scrolled through all symbols
                if (currentPosition <= -(symbolHeight * characterNames.length * 6)) {
                    currentPosition = 0;
                }
            };
            
            const spinInterval = setInterval(spin, 8); // Faster frame rate
            
            // Stop after much longer duration and wait for natural roll-around
            setTimeout(() => {
                clearInterval(spinInterval);
                
                // Calculate where we need to naturally roll to get the final character
                const finalIndex = characterNames.indexOf(finalCharacter);
                const currentSymbolIndex = Math.abs(Math.floor(currentPosition / symbolHeight)) % characterNames.length;
                
                // Continue spinning until we naturally hit the winning character
                let naturalSpin;
                const waitForWinner = () => {
                    currentPosition -= speed;
                    reel.style.top = currentPosition + 'px';
                    
                    const currentIndex = Math.abs(Math.floor(currentPosition / symbolHeight)) % characterNames.length;
                    
                    // Check if we're at the winning position
                    if (currentIndex === finalIndex) {
                        clearInterval(naturalSpin);
                        
                        // Smooth final stop
                        reel.style.transition = 'top 1s ease-out';
                        const exactPosition = Math.floor(currentPosition / symbolHeight) * symbolHeight;
                        reel.style.top = exactPosition + 'px';
                        
                        setTimeout(() => {
                            reel.style.transition = 'none';
                        }, 1000);
                    }
                    
                    // Reset position for continuous loop
                    if (currentPosition <= -(symbolHeight * characterNames.length * 6)) {
                        currentPosition = 0;
                    }
                };
                
                naturalSpin = setInterval(waitForWinner, 8);
                
            }, duration);
        }

        function pullHandle() {
            if (isSpinning) return;
            
            const result = document.getElementById('result');
            const spinButton = document.getElementById('spinButton');
            
            spinButton.disabled = true;
            isSpinning = true;
            result.innerHTML = '';
            
            // Choose a random character for the guaranteed triple match
            const winningCharacter = getRandomCharacter();

            // Spin reels sequentially - start all at once, but stop in order
            spinSlot('reel1', 2000, winningCharacter);
            setTimeout(() => {
                spinSlot('reel2', 2000, winningCharacter);
            }, 1000);
            setTimeout(() => {
                spinSlot('reel3', 2000, winningCharacter);
            }, 2000);

            // Re-enable button after all reels stop and add to collection
            setTimeout(() => {
                addToCollection(winningCharacter);
                spinButton.disabled = false;
                isSpinning = false;
            }, 6000);
        }

        // Tab functionality
        function initializeTabs() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const targetTab = button.dataset.tab;
                    
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked button and corresponding content
                    button.classList.add('active');
                    document.getElementById(`${targetTab}-tab`).classList.add('active');
                });
            });
        }

        // Draft system functionality
        function initializeDraftSystem() {
            const banSelect = document.getElementById('banSelect');
            characterNames.forEach(name => {
                const option = document.createElement('option');
                option.value = name;
                option.textContent = name;
                banSelect.appendChild(option);
            });
        }

        function updateDraftStatus() {
            const statusEl = document.getElementById('draftStatus');

            const availableCount = characterNames.length - draftedCharacters.size - bannedCharacters.size;
            statusEl.innerHTML = `
                <h3 style="color: #00ff00;">Draft Active</h3>
                <p>Drafted: ${draftedCharacters.size}/${characterNames.length} | Available: ${availableCount} | Banned: ${bannedCharacters.size}</p>
            `;
        }

        function resetDraft() {
            isDraftActive = true;
            draftedCharacters.clear();
            bannedCharacters.clear();
            recentActions = [];
            collectedCharacters.clear();
            availableCharacters = [...characterNames];
            
            updateDraftStatus();
            updateBannedDisplay();
            updateRecentActionsDisplay();
            updateTitle('DRAFT SYSTEM', 'none');
            
            // Clear all collections
            const collections = ['collectedCharacters', 'draftCollectedCharacters', 'recentActions'];
            collections.forEach(id => {
                const el = document.getElementById(id);
                if (el) el.innerHTML = '';
            });
        }

        function rollInDraft() {
            if (!isDraftActive) {
                // No draft mode - just roll any character
                const selected = characterNames[Math.floor(Math.random() * characterNames.length)];
                pullHandleForCharacter(selected);
                return;
            }
            
            const available = characterNames.filter(name => 
                !draftedCharacters.has(name) && !bannedCharacters.has(name)
            );
            
            if (available.length === 0) {
                alert('No characters available to draft!');
                return;
            }

            const selected = available[Math.floor(Math.random() * available.length)];
            draftedCharacters.add(selected);
            pullHandleForCharacter(selected);
            updateDraftStatus();
        }
        
        function pullHandleForCharacter(winningCharacter, actionType = 'roll') {
            if (isSpinning) return;
            
            const result = document.getElementById('result');
            const rollButton = document.getElementById('rollCharacterBtn');
            const banButton = document.getElementById('randomBanBtn');
            
            rollButton.disabled = true;
            banButton.disabled = true;
            isSpinning = true;
            result.innerHTML = '';
            
            // Update title based on action
            if (actionType === 'ban') {
                updateTitle('RANDOM BAN', 'ban');
            } else {
                updateTitle('RANDOM STRIKER', 'roll');
            }

            // Spin reels sequentially - start all at once, but stop in order
            spinSlot('reel1', 2000, winningCharacter);
            setTimeout(() => {
                spinSlot('reel2', 2000, winningCharacter);
            }, 1000);
            setTimeout(() => {
                spinSlot('reel3', 2000, winningCharacter);
            }, 2000);

            // Re-enable button after all reels stop and add to collection/action
            setTimeout(() => {
                if (actionType === 'ban') {
                    bannedCharacters.add(winningCharacter);
                    addRecentAction('ban', winningCharacter);
                    updateBannedDisplay();
                } else {
                    addToCollection(winningCharacter);
                    addRecentAction('roll', winningCharacter);
                    if (isDraftActive) {
                        draftedCharacters.add(winningCharacter);
                    }
                }
                
                // Reset title after a delay
                setTimeout(() => {
                    updateTitle('DRAFT SYSTEM', 'none');
                }, 2000);
                
                rollButton.disabled = false;
                banButton.disabled = false;
                isSpinning = false;
                updateDraftStatus();
            }, 6000);
        }

        function randomBan() {
            if (isSpinning) return;
            
            const available = characterNames.filter(name => 
                !bannedCharacters.has(name)
            );
            
            if (available.length === 0) {
                alert('All characters are already banned!');
                return;
            }

            const selected = available[Math.floor(Math.random() * available.length)];
            pullHandleForCharacter(selected, 'ban');
        }


        function banCharacter() {
            const select = document.getElementById('banSelect');
            const character = select.value;
            
            if (!character) return;
            if (bannedCharacters.has(character)) {
                alert('Character is already banned!');
                return;
            }
            if (!isDraftActive) {
                alert('No active draft! Start a draft first.');
                return;
            }

            bannedCharacters.add(character);
            select.value = '';
            updateDraftStatus();
            updateBannedDisplay();
        }

        function unbanCharacter(character) {
            bannedCharacters.delete(character);
            updateDraftStatus();
            updateBannedDisplay();
        }

        function updateBannedDisplay() {
            const bannedSection = document.getElementById('bannedSection');
            const bannedList = document.getElementById('bannedList');
            
            if (bannedCharacters.size === 0) {
                bannedSection.style.display = 'none';
                return;
            }

            bannedSection.style.display = 'block';
            bannedList.innerHTML = '';
            
            bannedCharacters.forEach(character => {
                const item = document.createElement('div');
                item.className = 'banned-item';
                item.innerHTML = `
                    <span>${character}</span>
                    <button class="unban-btn" onclick="unbanCharacter('${character}')">Unban</button>
                `;
                bannedList.appendChild(item);
            });
        }

        // Map randomizer functionality
        function randomMap() {
            const selected = mapNames[Math.floor(Math.random() * mapNames.length)];
            
            document.getElementById('mapName').textContent = selected;
            document.getElementById('mapImage').src = mapImages[selected];
            document.getElementById('mapImage').alt = selected;
            document.getElementById('mapResult').style.display = 'block';
        }

        // Make functions globally available
        window.unbanCharacter = unbanCharacter;

        // Event listeners
        document.getElementById('rollCharacterBtn').addEventListener('click', rollInDraft);
        document.getElementById('randomBanBtn').addEventListener('click', randomBan);
        document.getElementById('resetButton').addEventListener('click', resetCollection);
        document.getElementById('resetCollectionButton').addEventListener('click', resetCollection);
        
        // Draft event listeners
        document.getElementById('resetDraftBtn').addEventListener('click', resetDraft);
        document.getElementById('banBtn').addEventListener('click', banCharacter);
        
        // Map event listener
        document.getElementById('randomMapBtn').addEventListener('click', randomMap);

        // Initialize everything
        initializeTabs();
        initializeSlots();
        initializeDraftSystem();
        updateDraftStatus();
    </script>
</body>
</html>
